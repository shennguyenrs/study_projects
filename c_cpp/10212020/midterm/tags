!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DIVIDE	header.hpp	/^const char DIVIDE = '\/';$/;"	v
EXIT	header.hpp	/^const string EXIT = "0";$/;"	v
FIRST	header.hpp	/^const unsigned int FIRST = 1;$/;"	v
MINUS	header.hpp	/^const char MINUS = '-';$/;"	v
MULTIPLY	header.hpp	/^const char MULTIPLY = '*';$/;"	v
Monomial	header.hpp	/^    Monomial(float coefficient, char variable, int exponent):$/;"	f	class:Monomial
Monomial	header.hpp	/^class Monomial$/;"	c
MultiPolynomials	header.hpp	/^class MultiPolynomials$/;"	c
PLUS	header.hpp	/^const char PLUS = '+';$/;"	v
Polynomial	header.hpp	/^class Polynomial$/;"	c
VAR	header.hpp	/^const unsigned int VAR = 0;$/;"	v
coefficient	header.hpp	/^    float coefficient;$/;"	m	class:Monomial
divideDiffVar	header.cpp	/^string Polynomial::divideDiffVar(string oldKey, string key)$/;"	f	class:Polynomial
doEvaluate	header.cpp	/^float Polynomial::doEvaluate(map<char, float> varDict)$/;"	f	class:Polynomial
doOperate	header.cpp	/^Polynomial MultiPolynomials::doOperate()$/;"	f	class:MultiPolynomials
exponent	header.hpp	/^    int exponent;$/;"	m	class:Monomial
findMultiply	header.cpp	/^unsigned int MultiPolynomials::findMultiply()$/;"	f	class:MultiPolynomials
floatConvert	header.cpp	/^float floatConvert(string n)$/;"	f
getCoeff	header.cpp	/^float Monomial::getCoeff()$/;"	f	class:Monomial
getPoly	header.cpp	/^map<string, float> Polynomial::getPoly()$/;"	f	class:Polynomial
getTotUniVar	header.cpp	/^set<char> MultiPolynomials::getTotUniVar()$/;"	f	class:MultiPolynomials
getUniVar	header.cpp	/^set<char> Polynomial::getUniVar()$/;"	f	class:Polynomial
getVar	header.cpp	/^char Monomial::getVar()$/;"	f	class:Monomial
insertMono	header.cpp	/^void Polynomial::insertMono(Monomial mono)$/;"	f	class:Polynomial
insertPoly	header.cpp	/^void MultiPolynomials::insertPoly(Polynomial poly, char opr)$/;"	f	class:MultiPolynomials
insertTotUniVar	header.cpp	/^void MultiPolynomials::insertTotUniVar(Polynomial poly)$/;"	f	class:MultiPolynomials
insertUniVar	header.cpp	/^void Polynomial::insertUniVar(Monomial mono)$/;"	f	class:Polynomial
intConvert	header.cpp	/^unsigned int intConvert(string n)$/;"	f
isEmpty	header.cpp	/^bool MultiPolynomials::isEmpty()$/;"	f	class:MultiPolynomials
isEmpty	header.cpp	/^bool Polynomial::isEmpty()$/;"	f	class:Polynomial
isEqual	header.hpp	21;"	d
isExit	header.hpp	20;"	d
isFloat	header.cpp	/^bool isFloat(string n)$/;"	f
isInt	header.cpp	/^bool isInt(string n)$/;"	f
isMonoValid	header.cpp	/^bool isMonoValid(string str, unsigned int index)$/;"	f
isOtherOpr	header.cpp	/^bool isOtherOpr(string opr, unsigned int index)$/;"	f
lastItem	header.hpp	/^    map<string, float>::iterator lastItem = polynomial.end();$/;"	m	class:Polynomial
main	main.cpp	/^int main()$/;"	f
makeDict	header.cpp	/^pair <string, float> Monomial::makeDict()$/;"	f	class:Monomial
makeKey	header.cpp	/^string Monomial::makeKey()$/;"	f	class:Monomial
mpItr	header.hpp	/^    vector<pair<Polynomial, char>>::iterator mpItr;$/;"	m	class:MultiPolynomials
multiPolynomials	header.hpp	/^    vector<pair<Polynomial, char>> multiPolynomials;$/;"	m	class:MultiPolynomials
multiplyKeys	header.cpp	/^string MultiPolynomials::multiplyKeys(string key1, string key2)$/;"	f	class:MultiPolynomials
negativePoly	header.cpp	/^void Polynomial::negativePoly()$/;"	f	class:Polynomial
operateDivide	header.cpp	/^void Polynomial::operateDivide(Monomial mono)$/;"	f	class:Polynomial
operateMultiply	header.cpp	/^Polynomial MultiPolynomials::operateMultiply(Polynomial poly1, Polynomial poly2)$/;"	f	class:MultiPolynomials
operateMultiply	header.cpp	/^void Polynomial::operateMultiply(Monomial mono)$/;"	f	class:Polynomial
operatePlus	header.cpp	/^Polynomial MultiPolynomials::operatePlus()$/;"	f	class:MultiPolynomials
operatePlus	header.cpp	/^void Polynomial::operatePlus(Monomial mono)$/;"	f	class:Polynomial
operateSameVar	header.cpp	/^string Polynomial::operateSameVar(char opr, string oldKey, string key)$/;"	f	class:Polynomial
operator =	header.cpp	/^void Polynomial::operator = (map<string, float> newPoly)$/;"	f	class:Polynomial
parseStr	header.cpp	/^void parseStr($/;"	f
plItr	header.hpp	/^    map<string, float>::iterator plItr;$/;"	m	class:Polynomial
polynomial	header.hpp	/^    map<string, float> polynomial;$/;"	m	class:Polynomial
printMap	header.cpp	/^void Polynomial::printMap()$/;"	f	class:Polynomial
totalUniqueVar	header.hpp	/^    set<char> totalUniqueVar;$/;"	m	class:MultiPolynomials
tuvItr	header.hpp	/^    set<char>::iterator tuvItr;$/;"	m	class:MultiPolynomials
uniqueVar	header.hpp	/^    set<char> uniqueVar;$/;"	m	class:Polynomial
updateMono	header.cpp	/^void Polynomial::updateMono(string newKey, float newValue)$/;"	f	class:Polynomial
uvItr	header.hpp	/^    set<char>::iterator uvItr;$/;"	m	class:Polynomial
variable	header.hpp	/^    char variable;$/;"	m	class:Monomial
