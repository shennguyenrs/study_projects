!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-recurse	Makefile	/^	ctags --recurse=yes -h .cpp.hpp.c.h$/;"	m
CC	Makefile	/^CC=g++$/;"	m
Dictionary	DictADT.hpp	/^    Dictionary() {} \/\/ Default constructor$/;"	f	class:Dictionary
Dictionary	DictADT.hpp	/^    Dictionary(const Dictionary&) {}$/;"	f	class:Dictionary
Dictionary	DictADT.hpp	/^class Dictionary $/;"	c
LINKERFLAG	Makefile	/^LINKERFLAG=-lm$/;"	m
QUEUE	Makefile	/^QUEUE := queue.cpp$/;"	m
QueueDict	QueueHeader/QueueDict.hpp	/^    QueueDict() {}$/;"	f	class:QueueDict
QueueDict	QueueHeader/QueueDict.hpp	/^class QueueDict $/;"	c
STACK	Makefile	/^STACK := stack.cpp$/;"	m
StackDict	StackHeader/StackDict.hpp	/^    StackDict() {}$/;"	f	class:StackDict
StackDict	StackHeader/StackDict.hpp	/^class StackDict $/;"	c
clear	QueueHeader/QueueDict.cpp	/^void QueueDict::clear()$/;"	f	class:QueueDict
clear	StackHeader/StackDict.cpp	/^void StackDict::clear()$/;"	f	class:StackDict
dictA	QueueHeader/QueueDict.hpp	/^    queue<pair<string, string>> dictA;$/;"	m	class:QueueDict
dictA	StackHeader/StackDict.hpp	/^    stack<pair<string, string>> dictA;$/;"	m	class:StackDict
dictB	QueueHeader/QueueDict.hpp	/^    queue<pair<string, string>> dictB;$/;"	m	class:QueueDict
dictB	StackHeader/StackDict.hpp	/^    stack<pair<string, string>> dictB;$/;"	m	class:StackDict
find	QueueHeader/QueueDict.cpp	/^string QueueDict::find(const string& k)$/;"	f	class:QueueDict
find	StackHeader/StackDict.cpp	/^string StackDict::find(const string& k)$/;"	f	class:StackDict
insert	QueueHeader/QueueDict.cpp	/^void QueueDict::insert(const string& k, const string& e)$/;"	f	class:QueueDict
insert	StackHeader/StackDict.cpp	/^void StackDict::insert(const string& k, const string& e)$/;"	f	class:StackDict
main	queue.cpp	/^int main()$/;"	f
main	stack.cpp	/^int main()$/;"	f
operator =	DictADT.hpp	/^    void operator = (const Dictionary&) {}$/;"	f	class:Dictionary
remove	QueueHeader/QueueDict.cpp	/^string QueueDict::remove(const string& k)$/;"	f	class:QueueDict
remove	StackHeader/StackDict.cpp	/^string StackDict::remove(const string& k)$/;"	f	class:StackDict
removeAny	QueueHeader/QueueDict.cpp	/^string QueueDict::removeAny()$/;"	f	class:QueueDict
removeAny	StackHeader/StackDict.cpp	/^string StackDict::removeAny()$/;"	f	class:StackDict
size	QueueHeader/QueueDict.cpp	/^int QueueDict::size()$/;"	f	class:QueueDict
size	StackHeader/StackDict.cpp	/^int StackDict::size()$/;"	f	class:StackDict
~Dictionary	DictADT.hpp	/^    virtual ~Dictionary() {} \/\/ Base destructor$/;"	f	class:Dictionary
~QueueDict	QueueHeader/QueueDict.hpp	/^    ~QueueDict()$/;"	f	class:QueueDict
~StackDict	StackHeader/StackDict.hpp	/^    ~StackDict()$/;"	f	class:StackDict
