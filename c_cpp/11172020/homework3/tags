!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-recurse	Makefile	/^	ctags --recurse=yes -h .cpp.hpp.c.h$/;"	m
CC	Makefile	/^CC=g++$/;"	m
Dictionary	DictADT.hpp	/^    Dictionary() {} \/\/ Default constructor$/;"	f	class:Dictionary
Dictionary	DictADT.hpp	/^    Dictionary(const Dictionary&) {}$/;"	f	class:Dictionary
Dictionary	DictADT.hpp	/^class Dictionary $/;"	c
LINKERFLAG	Makefile	/^LINKERFLAG=-lm$/;"	m
QUEUE	Makefile	/^QUEUE := queue.cpp$/;"	m
QueueDict	QueueDict.hpp	/^class QueueDict : public Dictionary<Key, E>$/;"	c
STACK	Makefile	/^STACK := stack.cpp$/;"	m
StackDict	StackDict.hpp	/^    StackDict() {}$/;"	f	class:StackDict
StackDict	StackDict.hpp	/^class StackDict $/;"	c
clear	QueueDict.cpp	/^void Dictionary<Key, E>::clear()$/;"	f	class:Dictionary
clear	StackDict.cpp	/^void StackDict::clear()$/;"	f	class:StackDict
dictA	QueueDict.hpp	/^    queue<Key, E> dictA;$/;"	m	class:QueueDict
dictA	StackDict.hpp	/^    stack<pair<string, string>> dictA;$/;"	m	class:StackDict
dictB	QueueDict.hpp	/^    queue<Key, E> dictB;$/;"	m	class:QueueDict
dictB	StackDict.hpp	/^    stack<pair<string, string>> dictB;$/;"	m	class:StackDict
find	QueueDict.cpp	/^E Dictionary<Key, E>::find(const Key &k) const$/;"	f	class:Dictionary
find	StackDict.cpp	/^string StackDict::find(const string &k)$/;"	f	class:StackDict
insert	QueueDict.cpp	/^void Dictionary<Key, E>::insert(const Key &k, const E &e)$/;"	f	class:Dictionary
insert	StackDict.cpp	/^void StackDict::insert(const string &k, const string &e)$/;"	f	class:StackDict
main	queue.cpp	/^int main()$/;"	f
main	stack.cpp	/^int main()$/;"	f
operator =	DictADT.hpp	/^    void operator = (const Dictionary&) {}$/;"	f	class:Dictionary
remove	QueueDict.cpp	/^E Dictionary<Key, E>::remove(const Key &k)$/;"	f	class:Dictionary
remove	StackDict.cpp	/^string StackDict::remove(const string &k)$/;"	f	class:StackDict
removeAny	QueueDict.cpp	/^E Dictionary<Key, E>::removeAny()$/;"	f	class:Dictionary
removeAny	StackDict.cpp	/^string StackDict::removeAny()$/;"	f	class:StackDict
size	QueueDict.cpp	/^int Dictionary<Key, E>::size()$/;"	f	class:Dictionary
size	StackDict.cpp	/^int StackDict::size()$/;"	f	class:StackDict
~Dictionary	DictADT.hpp	/^    virtual ~Dictionary() {} \/\/ Base destructor$/;"	f	class:Dictionary
~StackDict	StackDict.hpp	/^    ~StackDict()$/;"	f	class:StackDict
