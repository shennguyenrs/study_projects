{"version":3,"sources":["components/NavBar.jsx","App.js","utils.js","reportWebVitals.js","index.js"],"names":["NavBar","onReset","className","onClick","initialInput","name","phone","initialInfo","id","App","useState","info","setInfo","input","setInput","useEffect","axios","get","then","res","data","handleInputChange","e","target","value","position","autoClose","hideProgressBar","closeOnClick","newestOnTop","pauseOnHover","onSubmit","preventDefault","number","RegExp","test","i","length","toast","error","prevInfo","success","notifyErrPhone","type","onChange","map","person","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAkBeA,G,MAfA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChB,OACE,qBAAKC,UAAU,+BAAf,SACE,wBACEA,UAAU,kBACVC,QAAS,WACPF,KAHJ,uBCQAG,EAAe,CACnBC,KAAM,GACNC,MAAO,IAGHC,EAAc,CAAC,CAAEC,GAAI,EAAGH,KAAM,QAASC,MAAO,iBAoHrCG,EAlHH,WAAM,MAEQC,mBAASH,GAFjB,mBAETI,EAFS,KAEHC,EAFG,OAGUF,mBAASN,GAHnB,mBAGTS,EAHS,KAGFC,EAHE,KAMhBC,qBAAU,WACRC,IAAMC,IAtBM,gBAsBOC,MAAK,SAACC,GACvBP,EAAQO,EAAIC,WAEb,IAGH,IAeMC,EAAoB,SAACC,GACzBR,EAAS,2BAAKD,GAAN,kBAAcS,EAAEC,OAAOlB,KAAOiB,EAAEC,OAAOC,UAgCjD,OACE,qCACE,cAAC,IAAD,CACEC,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,cAAY,EACZC,aAAa,EACbC,cAAY,IAEd,cAAC,EAAD,CAAQ7B,QAfQ,WAClBW,EAAQL,GACRO,EAASV,MAcP,sBAAKF,UAAU,iEAAf,UACE,gCACE,2CACA,sBAAM6B,SA3CO,SAACT,GAIpB,GAHAA,EAAEU,iBCrDwBC,EDwDPpB,EAAMP,MCvDX,IAAI4B,OAAO,qCAEfC,KAAKF,GDqDf,CAMA,IC9DyB,IAACA,EDiCT5B,EA6BR+B,EAAI,EAAGA,EAAIzB,EAAK0B,OAAQD,GAAK,EACpC,GAAIvB,EAAMR,OAASM,EAAKyB,GAAG/B,KAEzB,OAhCaA,EA+BHQ,EAAMR,UA9BpBiC,IAAMC,MAAN,UAAelC,EAAf,sDAoCA,IAAMG,EAAKG,EAAK0B,OAAS,EACzBzB,GAAQ,SAAC4B,GAAD,4BAAkBA,GAAlB,cAA8BhC,MAAOK,QAC7CC,EAASV,GA5BTkC,IAAMG,QAAQ,uCAPO,SAACR,GACtBK,IAAMC,MAAN,UACKN,EADL,0DAmBES,CAAe7B,EAAMP,QAsCjB,SACE,sBAAKJ,UAAU,aAAf,UACE,yCACA,uBACEA,UAAU,oBACVyC,KAAK,OACLtC,KAAK,OACLmB,MAAOX,EAAMR,KACbuC,SAAUvB,IAEZ,iDACA,uBACEnB,UAAU,oBACVyC,KAAK,OACLtC,KAAK,QACLmB,MAAOX,EAAMP,MACbsC,SAAUvB,IAEZ,wBAAQnB,UAAU,kBAAkByC,KAAK,SAAzC,0BAMN,gCACE,yCACA,oBAAIzC,UAAU,aAAd,SACGS,EAAKkC,KAAI,SAACC,GAAD,OACR,qBAAoB5C,UAAU,2BAA9B,UACG4C,EAAOzC,KADV,MACmByC,EAAOxC,QADjBwC,EAAOtC,mBEhHfuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a16a7e42.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\n\nconst NavBar = ({ onReset }) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <button\n        className=\"btn btn-warning\"\n        onClick={() => {\n          onReset();\n        }}\n      >\n        Reset\n      </button>\n    </nav>\n  );\n}\n\nexport default NavBar\n\nNavBar.propTypes = {\n  onReset: PropTypes.func,\n};\n","import React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport './App.css';\n\n// Base url\nconst baseUrl = '/api/persons';\n\n// Components\nimport NavBar from './components/NavBar';\n\n// Utils\nimport { validatePhone } from './utils';\n\nconst initialInput = {\n  name: '',\n  phone: '',\n};\n\nconst initialInfo = [{ id: 0, name: 'test1', phone: '090-403-3920' }];\n\nconst App = () => {\n  // States\n  const [info, setInfo] = useState(initialInfo);\n  const [input, setInput] = useState(initialInput);\n\n  // Request data\n  useEffect(() => {\n    axios.get(baseUrl).then((res) => {\n      setInfo(res.data);\n    });\n  }, []);\n\n  // Notifications\n  const notifyErr = (name) => {\n    toast.error(`${name} is duplicated! Please try again with a new ones!`);\n  };\n\n  const notifyErrPhone = (number) => {\n    toast.error(\n      `${number} is wrong format! Please try again with xxx-xxx-xxxx!`\n    );\n  };\n\n  const notifySuc = () => {\n    toast.success('New record added successfully!');\n  };\n\n  // Handle Events\n  const handleInputChange = (e) => {\n    setInput({ ...input, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Validate phone number is correct format\n    if (!validatePhone(input.phone)) {\n      notifyErrPhone(input.phone);\n      return;\n    }\n\n    // Validate name is duplicated\n    for (let i = 0; i < info.length; i += 1) {\n      if (input.name === info[i].name) {\n        notifyErr(input.name);\n        return;\n      }\n    }\n\n    // Success adding new record\n    const id = info.length + 1;\n    setInfo((prevInfo) => [...prevInfo, { id, ...input }]);\n    setInput(initialInput);\n    notifySuc();\n  };\n\n  const handleReset = () => {\n    setInfo(initialInfo);\n    setInput(initialInput);\n  };\n\n  return (\n    <>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        closeOnClick\n        newestOnTop={true}\n        pauseOnHover\n      />\n      <NavBar onReset={handleReset} />\n      <div className=\"w-25 m-5 d-flex flex-column justify-content-center text-center\">\n        <div>\n          <h1>Phonebook</h1>\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label>Name</label>\n              <input\n                className=\"form-control mb-3\"\n                type=\"text\"\n                name=\"name\"\n                value={input.name}\n                onChange={handleInputChange}\n              />\n              <label>Phone number</label>\n              <input\n                className=\"form-control mb-3\"\n                type=\"text\"\n                name=\"phone\"\n                value={input.phone}\n                onChange={handleInputChange}\n              />\n              <button className=\"btn btn-primary\" type=\"submit\">\n                Save\n              </button>\n            </div>\n          </form>\n        </div>\n        <div>\n          <h1>Numbers</h1>\n          <ul className=\"list-group\">\n            {info.map((person) => (\n              <li key={person.id} className=\"list-group-item bg-light\">\n                {person.name} - {person.phone}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// Validation Phone Number\nexport const validatePhone = (number) => {\n  const pattern = new RegExp(/([0-9]{3})-([0-9]{3})-([0-9]{4})$/);\n\n  if (pattern.test(number)) {\n    return true;\n  }\n\n  return false;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport '../node_modules/react-toastify/dist/ReactToastify.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}